local storages = import "motor.storages"
local bit_ids  = import "motor.bit_ids"
local systems  = import "motor.systems"

record StateData
  steps: {{systems.SystemData}}
  state_content: {{integer}: value}
  last_state_content_bit_id: {integer}
  entities_bit_id: {integer}
end

function new_init_state_data(): StateData
  local last_state_content_bit_id = bit_ids.new_bit_filter({})
  local entities_bit_id = bit_ids.new_bit_id(last_state_content_bit_id)

  local new_state_data: StateData = {
    steps = {},
    state_content = {},
    last_state_content_bit_id = last_state_content_bit_id,
    entities_bit_id = entities_bit_id
  }

  new_state_data.entities_bit_id = add_state_content(new_state_data, storages.new_init_storage())

  return new_state_data
end

--

function add_state_content(state_data: StateData, state_content_content: value): {integer}
  state_data.last_state_content_bit_id = bit_ids.new_bit_id(state_data.last_state_content_bit_id)
  state_data.state_content[state_data.last_state_content_bit_id] = state_content_content
  return state_data.last_state_content_bit_id
end

function add_systems_step(state_data: StateData, systems_step: {systems.SystemData})
  state_data.steps[#state_data.steps+1] = systems_step
end

--

function StateData:add_state_content(state_content_content: value): {integer}
  return add_state_content(self, state_content_content)
end

function StateData:add_systems_step(systems_step: {systems.SystemData})
  add_systems_step(self, systems_step)
end
